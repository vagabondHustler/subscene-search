name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ["3.10.8", "3.11.0"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Test with tox
        run: tox

  black-isort:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Install black & isort
        run: |
          pip install black
          pip install isort
          isort ./src --profile 'black'
          black ./src -l 125
          isort ./tests --profile 'black'
          black ./tests -l 125

      - name: Push black & isort changes
        run: |
          git status
          git add -A
          git commit -S -m "Reformat codebase with black & isort"
          git fetch origin main
          git push origin HEAD:main

  versioning:
    name: Versioning
    needs: ["test", "black-isort"]
    runs-on: ubuntu-latest
    outputs:
      version_output: ${{ steps.current_version.outputs.prev_version_output }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "*"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Get current version
        id: current_version
        run: |
          output=$(python src/subsearch/data/version.py --get-version)
          echo "::set-output name=prev_version_output::$output"

      - name: Update version.py
        run: python scripts/update_version.py ${{ github.ref_name }}

      - name: Push new version
        run: |
          git status
          git add src/subsearch/data/version.py
          git commit -S -m "Bump version v${{steps.current_version.outputs.prev_version_output}} â†’ ${{ github.ref_name }}"
          git fetch origin main
          git push origin HEAD:main

  build-and-publish:
    name: Build and Publish
    needs: versioning
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Build changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          configuration: .github/configs/changelog_builder.json
          ignorePreReleases: ${{ !contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "*"

      - name: Install requirements
        run: |
          git fetch origin main
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r docs/requirements.txt

      - name: Build executable
        run: |
          pyinstaller scripts/build.spec -y --clean --distpath ./subsearch-x64
      - name: Make archives
        run: |
          python scripts/make_archive.py
          mv ./subsearch-x64.zip ./subsearch-${{ github.ref_name }}-win-x64.zip

      - name: Update changelog
        id: update_changelog
        run: |
          echo "${{steps.github_release.outputs.changelog}}" > tmp_changelog.md

          $sha256_hash = Get-FileHash -Path "subsearch-${{ github.ref_name }}-win-x64.zip" -Algorithm SHA256 | Select-Object -ExpandProperty Hash

          $ver = cat .github/configs/latest_release.yml

          $line1 = "###### Full changelog: "
          $http_subsearch = "https://github.com/vagabondHustler/subsearch"
          $line2 = "[${{ github.ref_name }}]($http_subsearch/compare/$ver...${{ github.ref_name }})"
          $line3 = "<p>VirusTotal analysis: [subsearch-${{ github.ref_name }}-win-x64.zip](https://www.virustotal.com/gui/file/$sha256_hash)"

          echo "$line1$line2$line3" >> tmp_changelog.md

      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: tmp_changelog.md
          token: ${{ secrets.ACTIONS_TOKEN }}
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
          files: |
            subsearch-${{ github.ref_name }}-win-x64.zip

  pypi-upload:
    if: ${{ !contains(github.ref, '-') }}
    name: Upload to PyPi
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "*"

      - name: Install requirements
        run: |
          git fetch origin main
          python -m pip install --upgrade --disable-pip-version-check pip
          python -m pip install --upgrade build twine

      - name: Build wheel and source distributions
        run: |
          python -m build

      - name: Upload to PyPI via Twine
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload --verbose -u '__token__' dist/*

  latest-release-yml:
    if: ${{ !contains(github.ref, '-') }}
    name: Update latest_release.yml
    needs: [versioning, pypi-upload, build-and-publish]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Write to latest_release
        run: |
          echo "${{ github.ref_name }}" > .github/configs/latest_release.yml

      - name: Push origin HEAD:main
        run: |
          git status
          git add .github/configs/latest_release.yml
          git commit -S -m "Chore update latest_release.yml"
          git fetch origin main
          git push origin HEAD:main
