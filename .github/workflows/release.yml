name: Release

on:
  push:
    tags:
      - "*.*.*"

jobs:
  variables:
    name: Set enviroment variables
    runs-on: windows-latest
    outputs:
      new_tags: "${{ steps.new_tags.outputs.tags }}"
      current_tags: "${{ steps.current_tags.outputs.tags }}"
      previous_stable_tags: "${{ steps.previous_stable_tags.outputs.tags }}"
      
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "*"
  
      - name: New tags
        id: new_tags
        run: |
          $refName = $env:GITHUB_REF_NAME.Substring(1)
          Write-Host "new_tags=$refName"

      - name: Current tags
        id: current_tags
        run: ${{ vars.CLI_JSON }} --read current_version

      - name: Previous stable tags
        id: previous_stable_tags
        run: ${{ vars.CLI_JSON }} --read previous_stable_version




  version_control:
    name: Version Control
    needs: variables
    runs-on: ubuntu-latest
    steps:
      - uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true

      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.6"

      - name: Bump Subsearch version
        run: |
          ${{ vars.CLI_PY }} --new-string ${{ needs.variables.outputs.new_tags }}

      - name: Commit and push
        run: |
          git status
          git add src/subsearch/data/version.py
          git commit -S -m "Bump version ${{ needs.variables.outputs.current_tags }} â†’ ${{ needs.variables.outputs.new_tags }}"
          git fetch origin main
          git push origin HEAD:main

  build_binaries:
    name: Build binaries
    needs: [variables, version_control]
    runs-on: windows-latest
    outputs:
      msi_hash: ${{ steps.hashes.outputs.msi_hash }}
      exe_hash: ${{ steps.hashes.outputs.exe_hash }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.6"

      - name: Build binaries
        id: build
        run: |
          git fetch origin main
          python -m pip install --upgrade pip
          pip install -e .[dev,optional]
          python -m setup bdist_msi

      - name: Create hashes file
        id: hashes
        run: |
          ${{ vars.CLI_SOFTWARE }} --write-hashes

      - name: Upload hashes.sha256 artifact
        uses: actions/upload-artifact@v3
        with:
          name: hashes.sha256
          path: artifacts
          if-no-files-found: error

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v3
        with:
          name: Subsearch-${{ needs.variables.outputs.new_tags }}-win64.msi
          path: dist
          if-no-files-found: error

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v3
        with:
          name: Subsearch.exe
          path: build/exe.win-amd64-3.11
          if-no-files-found: error

  test_binaries:
    name: Test binaries
    needs: [variables, version_control, build_binaries]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "*"

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts

      - name: Run tests
        id: tests
        run: |
          ${{ vars.CLI_SOFTWARE }} --run-test -t install -f msi_artifact
          ${{ vars.CLI_SOFTWARE }} --run-test -t executable
          ${{ vars.CLI_SOFTWARE }} --run-test -t uninstall -f msi_artifact

  virustotal_scan:
    name: VirusTotal scan of binaries
    if: ${{  !contains(github.ref_name, 'b') && !contains(github.ref_name, 'a') }}
    needs: [variables, test_binaries]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VIRUSTOTAL_API_KEY }}
          github_token: ${{ secrets.ACTIONS_TOKEN }}
          update_release_body: false
          request_rate: 4
          files: |
            artifacts/Subsearch.exe
            artifacts/Subsearch-${{ needs.variables.outputs.new_tags }}-win64.msi

  changelog:
    name: Generate changelog
    needs: [variables, build_binaries, test_binaries]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts

      - name: Build changelog for pre-release
        id: changelog_pre_release
        uses: mikepenz/release-changelog-builder-action@v4
        if: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'b') || contains(github.ref_name, 'a') }}
        with:
          configuration: .github/configs/changelog_builder.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build changelog for full-release
        id: changelog_full_release
        uses: mikepenz/release-changelog-builder-action@v4
        if: ${{ !contains(github.ref_name, 'rc') && !contains(github.ref_name, 'b') && !contains(github.ref_name, 'a') }}
        with:
          fromTag: ${{ needs.variables.outputs.previous_stable_tags }}
          toTag: ${{ github.ref_name }}
          configuration: .github/configs/changelog_builder.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update changelog
        id: update_changelog
        run: |
          msi=${{ needs.build_binaries.outputs.msi_hash }}
          exe=${{ needs.build_binaries.outputs.exe_hash }}
          new_tags=${{ needs.variables.outputs.new_tags }}
          ${{ vars.CLI_CHANGELOG }} --new-tags $new_tags --hashes $msi;$exe

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v3
        with:
          name: changelog-${{ needs.variables.outputs.new_tags }}.md
          path: artifacts

  publish_github:
    name: Publish to GitHub
    needs: [variables, changelog]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts

      - uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ needs.variables.outputs.new_tags }}
          body_path: changelog-${{ needs.variables.outputs.new_tags }}.md
          token: ${{ secrets.ACTIONS_TOKEN }}
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'b') || contains(github.ref_name, 'a') }}
          files: |
            artifacts/hashes.sha256
            artifacts/Subsearch-${{ needs.variables.outputs.new_tags }}-win64.msi

  publish_pypi:
    if: ${{ !contains(github.ref_name, 'b') && !contains(github.ref_name, 'a') }}
    name: Publish to PyPi
    needs: [version_control, changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "*"

      - name: Install requirements
        run: |
          git fetch origin main
          python -m pip install --upgrade --disable-pip-version-check pip
          python -m pip install --upgrade build twine

      - name: Build wheel and source distributions
        run: |
          python -m build

      - name: Upload to PyPI via Twine
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload --verbose -u '__token__' dist/*



  post_version_control:
    name: Update latest_release.yml
    needs: [changelog]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true

      - name: Update previous stable version
        run: |
          ${{ vars.CLI_JSON }} -w 
          echo "${{ github.ref_name }}" > .github/configs/latest_release.yml

      - name: Commit and push
        run: |
          git status
          git add .github/configs/latest_release.yml
          git commit -S -m "Chore update latest_release.yml"
          git fetch origin main
          git push origin HEAD:main