name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  # get the current version, update version.json in ../data with new version with pushed tags
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.6"
      # import GPG key for verified commits
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      # read __version__.py in ../data, save as variable version_output
      - name: Get current version
        id: current_version
        run: |
          cp -r ./src/subsearch/ scripts/subsearch/
          output=$(python scripts/_get__version__.py)
          echo "::set-output name=version_output::$output"
      # write pushed tags as version number into version.json in ../data
      - name: Update __version__.py
        run: python scripts/_set__version__.py ${{ github.ref_name }}
      # commit version.json in ../data, with msg Bump version from vx.x.x to vx.x.x in /data
      - name: Commit version.json
        run: |
          git status
          git add src/subsearch/data/__version__.py
          git commit -S -m "release:: v${{steps.current_version.outputs.version_output}} -> ${{ github.ref_name }}"
          git fetch origin main
          git push origin HEAD:main

  build-and-publish:
    name: Build and Publish
    needs: versioning
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.6"
      # install pyinstaller and requirements
      - name: Initializing
        run: |
          git fetch origin main
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r docs/requirements.txt
      # copy source code to workflows
      - name: Copy source to scripts/subsearch
        run: |
          cp -r ./src/subsearch/ scripts/subsearch/
          rm scripts/subsearch/__init__.py
          rm scripts/subsearch/__main__.py
      # build the executable and manually add sv_ttk otherwise it wont be included
      - name: Build executable
        run: |
          pyinstaller scripts/build.spec -y --clean --distpath ./SubSearch-x64
          cp -r C:/hostedtoolcache/windows/Python/3.10.6/x64/lib/site-packages/sv_ttk/ ./SubSearch-x64/SubSearch/sv_ttk
      # make archives for publishing
      - name: Make archives
        run: |
          python scripts/_make_archive.py
          mv ./SubSearch-x64.zip ./SubSearch-${{ github.ref_name }}-win-x64.zip
          mv ./SubSearch-source.zip ./SubSearch-${{ github.ref_name }}-win-source.zip
      # publish the release with ACTION_TOKEN for verified release
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.ACTIONS_TOKEN }}
          generate_release_notes: True
          files: |
            SubSearch-${{ github.ref_name }}-win-x64.zip
            SubSearch-${{ github.ref_name }}-win-source.zip

  pypi-upload:
    name: PyPI Upload
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.6"

      - name: Install latest pip, build, twine
        run: |
          git fetch origin main
          python -m pip install --upgrade --disable-pip-version-check pip
          python -m pip install --upgrade build twine
      - name: Build wheel and source distributions
        run: |
          python -m build
      - name: Upload to PyPI via Twine
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload --verbose -u '__token__' dist/*
