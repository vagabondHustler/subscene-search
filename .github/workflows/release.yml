name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ["3.10.*", "3.11.*"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Test with tox
        run: tox

  black-isort:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Install black & isort
        run: |
          pip install black
          pip install isort
          isort ./src --profile 'black'
          black ./src -l 125
          isort ./tests --profile 'black'
          black ./tests -l 125

      - name: Push black & isort changes
        run: |
          git status
          git add -A
          git commit -S -m "Reformat codebase with black & isort"
          git fetch origin main
          git push origin HEAD:main

  versioning:
    name: Versioning
    needs: ["test", "black-isort"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "*"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Get current version
        id: get_current_version
        run: |
          echo "current_version=$(python src/subsearch/data/version.py --get-version)" >> $GITHUB_ENV

      - name: Remove v from ${{ github.ref_name }}
        id: remove_v
        run: |
          v_version=${{ github.ref_name }}
          echo "new_version=${v_version:1}" >> $GITHUB_ENV

      - name: Update version.py
        run: python scripts/update_version.py ${{env.new_version}}

      - name: Push new version
        run: |
          git status
          git add src/subsearch/data/version.py
          git commit -S -m "Bump version ${{env.current_version}} â†’ ${{env.new_version}}"
          git fetch origin main
          git push origin HEAD:main

    outputs:
      current_version: "${{env.current_version}}"
      new_version: "${{env.new_version}}"

  build-and-publish:
    name: Build and Publish
    needs: versioning
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "*"

      - name: Install requirements
        run: |
          git fetch origin main
          python -m pip install --upgrade pip
          pip install -e .[dev,optional]

      - name: Build executable and MSI installer
        id: build_msi
        run: |
          python setup.py bdist_msi -d .
          

      - name: Build changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          configuration: .github/configs/changelog_builder.json
          ignorePreReleases: ${{ !contains(github.ref_name, 'rc') && !contains(github.ref_name, 'b') && !contains(github.ref_name, 'a') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update changelog
        id: update_changelog
        run: |
          echo "${{steps.github_release.outputs.changelog}}" > tmp_changelog.md

          $sha256_hash = Get-FileHash -Path "Subsearch-${{ needs.versioning.outputs.new_version }}-win64.msi" -Algorithm SHA256 | Select-Object -ExpandProperty Hash

          $subsearch_repo = "https://github.com/vagabondHustler/subsearch"
          $version_yml = cat .github/configs/latest_release.yml
          $pre_releases = @('rc', 'a', 'b')
          $virustotal_no_file = "<p>VirusTotal analysis: No file uploaded"
          $virustotal_url = "<p>VirusTotal analysis: [Subsearch-${{ needs.versioning.outputs.new_version }}-win64.msi](https://www.virustotal.com/gui/file/$sha256_hash)"


          $line1 = "###### Full changelog: "
          $line2 = "[${{ github.ref_name }}]($subsearch_repo/compare/$version_yml...${{ github.ref_name }})"
          $is_pre_release = $null -ne ($pre_releases | ? { "${{ github.ref_name }}" -match $_ })
          if ($is_pre_release){$line3 = $virustotal_no_file} else {$line3 = $virustotal_url}
          $line4 = "<p>SHA256: **$sha256_hash**"

          echo "$line1$line2$line3$line4" >> tmp_changelog.md

      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ needs.versioning.outputs.new_version }}
          body_path: tmp_changelog.md
          token: ${{ secrets.ACTIONS_TOKEN }}
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'b') || contains(github.ref_name, 'a') }}
          files: |
            Subsearch-${{ needs.versioning.outputs.new_version }}-win64.msi

  pypi-upload:
    if: ${{ !contains(github.ref_name, 'b') && !contains(github.ref_name, 'a') }}
    name: Upload to PyPi
    needs: ["versioning", "build-and-publish"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - uses: actions/setup-python@v4
        with:
          python-version: "*"

      - name: Install requirements
        run: |
          git fetch origin main
          python -m pip install --upgrade --disable-pip-version-check pip
          python -m pip install --upgrade build twine

      - name: Build wheel and source distributions
        run: |
          python -m build

      - name: Upload to PyPI via Twine
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload --verbose -u '__token__' dist/*

  latest-release-yml:
    if: ${{ !contains(github.ref_name, 'rc') && !contains(github.ref_name, 'b') && !contains(github.ref_name, 'a') }}
    name: Update latest_release.yml
    needs: [versioning, pypi-upload, build-and-publish]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Write to latest_release
        run: |
          echo "${{ github.ref_name }}" > .github/configs/latest_release.yml

      - name: Push origin HEAD:main
        run: |
          git status
          git add .github/configs/latest_release.yml
          git commit -S -m "Chore update latest_release.yml"
          git fetch origin main
          git push origin HEAD:main
